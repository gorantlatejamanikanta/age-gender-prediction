{"version":3,"sources":["postData.js","formComponent.js","TableComponent.js","App.js","serviceWorker.js","index.js"],"names":["url","data","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","response","text","postData","useStyles","makeStyles","theme","textField","minWidth","margin","FormComponent","predictType","classes","useState","formData","setFormData","predictMessage","setPredictMessage","handleValueChange","field","value","obj","TextField","onChange","e","target","root","label","parseFloat","parseInt","className","Typography","variant","Button","color","onClick","then","table","maxHeight","StyledTableCell","withStyles","head","backgroundColor","fontSize","fontWeight","TableCell","cols","TableComponent","rows","setRows","useEffect","json","TableContainer","component","Paper","Table","stickyHeader","aria-label","TableHead","TableRow","map","c","TableBody","row","key","device_id","scope","align","gender","female_probability","male_probability","predicted_gender","phone_brand","device_model","age_group","predicted_age","GENERIC_CATEGORY","App","style","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e7778f19.chunk.js","sourcesContent":["async function postData(url = '', data = {}) {\r\n  // Default options are marked with *\r\n  const response = await fetch(url, {\r\n    method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n    mode: 'cors', // no-cors, *cors, same-origin\r\n    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n    credentials: 'same-origin', // include, *same-origin, omit\r\n    headers: {\r\n      'Accept': 'application/json',\r\n      'Content-Type': 'application/json',\r\n    },\r\n    redirect: 'follow', // manual, *follow, error\r\n    referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n    body: JSON.stringify(data)\r\n  });\r\n  return await response.text(); // parses JSON response into native JavaScript objects\r\n}\r\n\r\nexport default postData;","import React, {useState} from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport \"./App.css\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport postData from \"./postData\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  textField: {\r\n    minWidth: 300,\r\n    margin: \"10px 0\",\r\n  },\r\n}));\r\n\r\nfunction FormComponent({ predictType = \"gender\" }: { predictType: string }) {\r\n  const classes = useStyles();\r\n  const [formData, setFormData] = useState({})\r\n  const [predictMessage, setPredictMessage] = useState('')\r\n\r\n\r\n  const handleSubmit = () => {\r\n    postData(`/${predictType}Predict`, formData).then((data) => {\r\n      setPredictMessage(data)\r\n    });\r\n  };\r\n\r\n  const handleValueChange = (field, value) => {\r\n      const obj = {\r\n          [field]: value,\r\n      }\r\n\r\n      setFormData({\r\n          ...formData,\r\n          ...obj,\r\n      })\r\n  }  \r\n\r\n  return (\r\n    <>\r\n      {predictType === \"gender\" && (\r\n        <TextField\r\n          onChange={(e) => {\r\n              handleValueChange('age_group', e.target.value)\r\n          }}  \r\n          classes={{\r\n            root: classes.textField,\r\n          }}\r\n          label=\"Age Group\"\r\n        />\r\n      )}\r\n\r\n      {predictType === \"age\" && (\r\n        <TextField\r\n            onChange={(e) => {\r\n              handleValueChange('gender', e.target.value)\r\n            }} \r\n            classes={{\r\n                root: classes.textField,\r\n            }}\r\n          label=\"Gender\"\r\n        />\r\n      )}\r\n\r\n      <TextField\r\n        onChange={(e) => {\r\n              handleValueChange('event_id', parseFloat(e.target.value))\r\n            }} \r\n        classes={{\r\n          root: classes.textField,\r\n        }}\r\n        label=\"Event ID\"\r\n      />\r\n      <TextField\r\n        onChange={(e) => {\r\n              handleValueChange('hour_of_day', parseInt(e.target.value, 10))\r\n            }}\r\n        classes={{\r\n          root: classes.textField,\r\n        }}\r\n        label=\"Hour of day (0 - 23)\"\r\n      />\r\n      <TextField\r\n      onChange={(e) => {\r\n              handleValueChange('day_of_week', parseInt(e.target.value), 10)\r\n            }}\r\n        classes={{\r\n          root: classes.textField,\r\n        }}\r\n        label=\"Day of week (between 0 - 6)\"\r\n      />\r\n      <TextField\r\n      onChange={(e) => {\r\n              handleValueChange('longitude', parseFloat(e.target.value))\r\n            }}\r\n        classes={{\r\n          root: classes.textField,\r\n        }}\r\n        label=\"Longitude\"\r\n      />\r\n      <TextField\r\n      onChange={(e) => {\r\n              handleValueChange('latitude', parseFloat(e.target.value))\r\n            }}\r\n        classes={{\r\n          root: classes.textField,\r\n        }}\r\n        label=\"Latitude\"\r\n      />\r\n      <TextField\r\n      onChange={(e) => {\r\n              handleValueChange('phone_brand', e.target.value)\r\n            }}\r\n        classes={{\r\n          root: classes.textField,\r\n        }}\r\n        label=\"Phone Brand\"\r\n      />\r\n      <TextField\r\n      onChange={(e) => {\r\n              handleValueChange('device_model', e.target.value)\r\n            }}\r\n        classes={{\r\n          root: classes.textField,\r\n        }}\r\n        label=\"Device Model\"\r\n      />\r\n      <TextField\r\n      onChange={(e) => {\r\n              handleValueChange('app_id', parseInt(e.target.value))\r\n            }}\r\n        classes={{\r\n          root: classes.textField,\r\n        }}\r\n        label=\"Application ID\"\r\n      />\r\n      <TextField\r\n      onChange={(e) => {\r\n              handleValueChange('GENERIC_CATEGORY', e.target.value)\r\n            }}\r\n        classes={{\r\n          root: classes.textField,\r\n        }}\r\n        label=\"App Category\"\r\n      />\r\n      <div className='messageContainer'>\r\n        <Typography variant=\"subtitle1\">\r\n            {predictMessage}\r\n        </Typography>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>\r\n        Predict\r\n      </Button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FormComponent;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n    maxHeight:600,\r\n  },\r\n});\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: \"#fffebc\",\r\n    color: \"#000\",\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n    fontWeight: 600,\r\n  },\r\n}))(TableCell);\r\n\r\nconst cols = [\r\n  \"Device Id\",\r\n  \"Gender\",\r\n  \"F probability\",\r\n  \"M probability\",\r\n  \"predicted gender\",\r\n  // \"Event id\",\r\n  // \"Longitude\",\r\n  // \"Latitude\",\r\n  \"Phone Brand\",\r\n  \"Device Model\",\r\n  // \"App ID\",\r\n  \"Age Group\",\r\n  \"0-24 Prob\",\r\n  \"24-32 Prob\",\r\n  \"32_plus Prob\",\r\n  \"Predicted age\",\r\n  // \"Hour\",\r\n  // \"Day\",\r\n  \"Category\",\r\n  \r\n];\r\n\r\nexport default function TableComponent() {\r\n  const classes = useStyles();\r\n  const [rows, setRows] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/predict\")\r\n      .then((response) => response.json())\r\n      .then((data) => setRows(data));\r\n  }, []);\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table stickyHeader className={classes.table} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            {cols.map((c) => (\r\n              <StyledTableCell >{c}</StyledTableCell>\r\n            ))}\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row) => (\r\n            <TableRow key={row.device_id}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.device_id}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{row.gender}</TableCell>\r\n              <TableCell align=\"right\">{row.female_probability}</TableCell>\r\n              <TableCell align=\"right\">{row.male_probability}</TableCell>\r\n              <TableCell align=\"right\">{row.predicted_gender}</TableCell>\r\n              {/* <TableCell align=\"right\">{row.event_id}</TableCell>\r\n              <TableCell align=\"right\">{row.longitude}</TableCell>\r\n              <TableCell align=\"right\">{row.latitude}</TableCell> */}\r\n              <TableCell align=\"right\">{row.phone_brand}</TableCell>\r\n              <TableCell align=\"right\">{row.device_model}</TableCell>\r\n              {/* <TableCell align=\"right\">{row.app_id}</TableCell> */}\r\n              <TableCell align=\"right\">{row.age_group}</TableCell>\r\n              <TableCell align=\"right\">{row[\"0-24_Prob\"]}</TableCell>\r\n              <TableCell align=\"right\">{row[\"24-32_Prob\"]}</TableCell>\r\n              <TableCell align=\"right\">{row[\"32_plus_Prob\"]}</TableCell>\r\n              <TableCell align=\"right\">{row.predicted_age}</TableCell>\r\n              {/* <TableCell align=\"right\">{row.hour_of_day}</TableCell>\r\n              <TableCell align=\"right\">{row.day_of_week}</TableCell> */}\r\n              <TableCell align=\"right\">{row.GENERIC_CATEGORY}</TableCell>\r\n              \r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\n\r\nimport FormComponent from \"./formComponent\";\r\nimport TableComponent from \"./TableComponent\";\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport WcIcon from \"@material-ui/icons/Wc\";\r\nimport CalendarTodayIcon from \"@material-ui/icons/CalendarToday\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <AppBar position=\"static\">\r\n        <Toolbar>         \r\n          <Typography variant=\"h5\">\r\n            Age / Gender Prediction\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar> */}\r\n      <Typography variant=\"h4\" style={{margin: 10}}>Prediction Table</Typography>\r\n      <Typography variant=\"subtitle1\" style={{margin: 10}}>Note: Here we take 50 samples dynamically. Based on the necessity we can choose the respective campaign</Typography>\r\n      <div className=\"tableWrapper\">\r\n        <TableComponent />        \r\n      </div>\r\n      <Typography variant=\"h4\" style={{margin: 10}}>Prediction Form</Typography>\r\n      <div className=\"formWrapper\">         \r\n        <div className=\"genderPredictionContainer\">\r\n          <WcIcon style={{ fontSize: 100 }} color=\"primary\" />\r\n          <FormComponent predictType=\"gender\" />\r\n        </div>\r\n        <div className={\"agePredictionContainer\"}>\r\n          <CalendarTodayIcon style={{ fontSize: 100 }} color=\"primary\" />\r\n          <FormComponent predictType=\"age\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}